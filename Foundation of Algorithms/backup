#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <assert.h>
#include <string.h>

/* some #define's from my sample solution ------------------------------------*/
#define BOARD_SIZE          8       // board size
#define ROWS_WITH_PIECES    3       // number of initial rows with pieces
#define CELL_EMPTY          '.'     // empty cell character
#define CELL_BPIECE         'b'     // black piece character
#define CELL_WPIECE         'w'     // white piece character
#define CELL_BTOWER         'B'     // black tower character
#define CELL_WTOWER         'W'     // white tower character
#define COST_PIECE          1       // one piece cost
#define COST_TOWER          3       // one tower cost
#define TREE_DEPTH          3       // minimax tree depth
#define COMP_ACTIONS        10      // number of computed actions
#define SEPARATOR 			 "====================================="
#define BOOL 1
/* one type definition from my sample solution -------------------------------*/
typedef unsigned char board_t[BOARD_SIZE][BOARD_SIZE];  // board type

typedef struct node node_t;

struct node {
    int depth;
	int *rational_cost;
    int nboards;
    char **board;
    char *prev_move;
    int move_num;
	node_t **node;
    int (*cmp)(int, int); /* function pointer */
};


typedef struct {
	node_t *root;            /* root node of the tree */
	
} tree_t;

char **create_print_new_board(void);
void print_board(char **board);
int check_move(char *move, int move_num, char **board);
void print_error(int error_type);
void play_move(int error_type, char *move, char **board);
int board_cost(char **board);
tree_t *make_empty_tree(int func(int, int), char **board, int move_no);
char **duplicate_board(char **board);
void make_branches(node_t *root);
void recursive_assign_costs(node_t *root);
int min(int num1, int num2);
int max(int num1, int num2);
tree_t *next_action(tree_t *tree);



int
main(int argc, char *argv[]) {
    char **board;
    int move_num=0, error_type, actions_left;
    char move[5];
    #if BOOL 
    int (*func)(int, int);
    tree_t *tree;
    #endif   
    
    board = create_print_new_board();
    
    while (scanf("%s", move) == 1){
        if (strlen(move) != 5){
            break;
        }
        
        move_num += 1;
        
        error_type = check_move(move, move_num, board);
        if (error_type > 0){
            print_error(error_type);
            return 0;
        }
        else{
            play_move(error_type, move, board);
        }
                
        printf("%s\n", SEPARATOR);

        if (move_num % 2){
            printf("BLACK ");
        }
        else{
            printf("WHITE ");
        }
        
        printf("ACTION #%d: %s\n", move_num, move);
        printf("BOARD COST: %d\n", board_cost(board));
        print_board(board);

    }

    
    move_num += 1;
    if (move_num % 2){
        func = max;
    }
    else{
        func = min;
    }
    
    tree = make_empty_tree(func, board, move_num);
    
    make_branches(tree->root);
    
    while((tree->root->rational_cost) == NULL){
        recursive_assign_costs(tree->root);
    }
    
    if (strlen(move) == 1 ){
        if (move[0] == 'A'){
            next_action(tree);
        }
        
        if (move[0] == 'P'){
            actions_left = 10;
            while (actions_left && ((tree = next_action(tree)) != NULL)){
                make_branches(tree->root);
    
                while ((tree->root->rational_cost) == NULL){
                recursive_assign_costs(tree->root);
                }
                actions_left -= 1;
            }
        }       
    }
    
    return EXIT_SUCCESS;            // exit program with the success code
}


char
**create_print_new_board(void){
	char **new_board;
	int row, col;
	
	new_board = (char**)malloc(sizeof(*new_board)*BOARD_SIZE);
	assert(new_board != NULL);
	
	for (row=0; row<BOARD_SIZE; row++){
        new_board[row] = (char*)malloc(BOARD_SIZE*sizeof(char));
        assert(new_board[row] != NULL);
        
		for (col=0; col<BOARD_SIZE; col++){
			new_board[row][col] = '.';
		}
	}
	
	for (row=0; row<ROWS_WITH_PIECES; row++){
		for (col=1; col<BOARD_SIZE; col+=2){
			new_board[row][col-row%2] = 'w';
			new_board[BOARD_SIZE-row-1][BOARD_SIZE-col-1+row%2] = 'b';
		}
	}
	
	printf("BOARD SIZE: 8x8\n#BLACK PIECES: 12\n#WHITE PIECES: 12\n");
    
	print_board(new_board);
	return new_board;
}
			
void
print_board(char **board){
	int row, col;
	
	printf("     A   B   C   D   E   F   G   H\n");
    printf("   +---+---+---+---+---+---+---+---+\n");
    
    for (row=0; row<BOARD_SIZE; row++){
    	printf(" %d |", row+1);
    	
    	for (col=0; col<BOARD_SIZE; col++){
    		printf(" %c |", board[row][col]);
    	}
    	
    	printf("\n   +---+---+---+---+---+---+---+---+\n");
    }
    
    return;		
}

int
check_move(char *move, int move_num, char **board){
    int source_col, source_row, dest_col, dest_row, col_diff, row_diff;
    char source_cell, dest_cell, jump_over_cell, turn;
    
    source_col = (int)(move[0]) - (int)('A');
    source_row = (int)(move[1]) - (int)('1');
    dest_col   = (int)(move[3]) - (int)('A');
    dest_row   = (int)(move[4]) - (int)('1');
    
   
    
    if ((source_col < 0 || source_col >= BOARD_SIZE) || 
        (source_row < 0 || source_row >= BOARD_SIZE)){
        return 1;
    }
    
    if ((dest_col < 0 || dest_col >= BOARD_SIZE) || 
        (dest_row < 0 || dest_row >= BOARD_SIZE)){
        return 2;
    }
    
    source_cell = board[source_row][source_col];
    dest_cell = board[dest_row][dest_col];
    
    if (source_cell == '.'){
        return 3;
    }
    
    if (dest_cell != '.'){
        return 4;
    }
    
    
    if (move_num % 2){
        turn = 'b';
    }
    else{
        turn = 'w';
    }
    
    
    if ((turn == 'b' && (source_cell == 'w' || source_cell == 'W'))||
        (turn == 'w' && (source_cell == 'b' || source_cell == 'B'))){
        return 5;
    }
    
    col_diff = dest_col - source_col;
    row_diff = dest_row - source_row;
    
    if (abs(col_diff) == 1 && abs(row_diff) == 1){
        if (source_cell == 'B' || source_cell == 'W'){
            return -1;
        }
        
        if ((row_diff == 1 && source_cell == 'w') || 
            (row_diff == -1 && source_cell == 'b')){
            return -1;
        }
    }
    
    if (abs(col_diff) == 2 && abs(row_diff) == 2){
        jump_over_cell = board[(source_row + dest_row)/2]
                              [(source_col + dest_col)/2];

        if ((turn == 'b' && (jump_over_cell == 'w' || jump_over_cell == 'W'))||
        (turn == 'w' && (jump_over_cell == 'b' || jump_over_cell == 'B'))){
            if ((source_cell == 'b' && row_diff == -2) ||
                (source_cell == 'w' && row_diff == 2)){
                return -2;
                }
            
            if (source_cell == 'B' || source_cell == 'W'){
                return -2;
            }
        }
    }

    return 6;
}

void
print_error(int error_type){
    if (error_type == 1){
        printf("ERROR: Source cell is outside of the board.\n");
    }
    
    if (error_type == 2){
        printf("ERROR: Target cell is outside of the board.\n");
    }
    
    if (error_type == 3){
        printf("ERROR: Source cell is empty.\n");
    }
    
    if (error_type == 4){
        printf("ERROR: Target cell is not empty.\n");
    }
    
    if (error_type == 5){
        printf("ERROR: Source cell holds opponent's piece/tower.\n");
    }
    
    if (error_type == 6){
        printf("ERROR: Illegal action.\n");
    }
    
    return;
}

void
play_move(int error_type, char *move, char **board){
    int source_col, source_row, dest_col, dest_row;
    char source_cell;
    
    source_col = (int)(move[0]) - (int)('A');
    source_row = (int)(move[1]) - (int)('1');
    dest_col   = (int)(move[3]) - (int)('A');
    dest_row   = (int)(move[4]) - (int)('1');
    
    source_cell = board[source_row][source_col];
    
    if (error_type == -1){
        if (source_cell == 'w' && dest_row == 7){
            board[dest_row][dest_col] = 'W';
        }
        else{if (source_cell == 'b' && dest_row == 0){
            board[dest_row][dest_col] = 'B';
        }
        else{
            board[dest_row][dest_col] = source_cell;
        }
        }
            
        board[source_row][source_col] = '.';
    }
    
    if (error_type == -2){
        if (source_cell == 'w' && dest_row == 7){
            board[dest_row][dest_col] = 'W';
        }
        else{if (source_cell == 'b' && dest_row == 0){
            board[dest_row][dest_col] = 'B';
        }
        else{
            board[dest_row][dest_col] = source_cell;
        }
        }
        
        board[source_row][source_col] = '.';
        board[(source_row + dest_row)/2][(source_col + dest_col)/2] = '.';
    }
    
    return;
}



int
board_cost(char **board){
    int row, col, cost=0;
    char cell;
    
    for (row=0; row<BOARD_SIZE; row++){
        for (col=0; col<BOARD_SIZE; col++){
            cell = board[row][col];
            cost += (cell == 'b');
            cost += 3*(cell == 'B');
            cost -= (cell == 'w');
            cost -= 3*(cell == 'W');
        }
    }
    
    return cost;
}



tree_t
*make_empty_tree(int func(int, int), char **board, int move_no) {
	tree_t *tree;
    char **board_copy;
    
	tree = malloc(sizeof(*tree));
    board_copy = duplicate_board(board);
    
	assert(tree!=NULL && board_copy!=NULL);
    
    tree->root = malloc(sizeof(*(tree->root)));

    assert(tree->root != NULL);
    
	tree->root->depth = 0;
    tree->root->nboards = 0;
	tree->root->cmp = func;   
    tree->root->board = board_copy;
    tree->root->rational_cost = NULL;
    tree->root->node = NULL;
    tree->root->move_num = move_no;
    
	return tree;
}



char **
duplicate_board(char **board){
    char **board_copy;
    int row, col;
    
    board_copy = (char**)malloc(sizeof(*board_copy)*BOARD_SIZE);

	assert(board_copy != NULL);
	
	for (row=0; row<BOARD_SIZE; row++){
        board_copy[row] = (char*)malloc(BOARD_SIZE*sizeof(char));
        assert(board_copy[row] != NULL);
        
		for (col=0; col<BOARD_SIZE; col++){
			board_copy[row][col] = board[row][col];
		}
	}
    
    return board_copy;
}


void
make_branches(node_t *root){
    int row, col, error_type, i;
    int find_piece_moves[8][2] = {{-1, 1}, {-2, 2}, {1, 1}, {2, 2}, {1, -1}, {2, -2}, {-1, -1}, {-2, -2}};
    char test_move[6];
    char **new_board;
    /*char *new_node;*/
    

    if (root->depth == 3){
        (root->rational_cost) = (int*)malloc(sizeof(int));
        *(root->rational_cost) = board_cost(root->board);
        return;
    }
    
    
    /* over every cell */   
    for (row=0; row<BOARD_SIZE; row++){
        for (col=0; col<BOARD_SIZE; col++){
            /* if black's turn */
            if (root->cmp == max){
                
                /* cell contain's black's piece */
                if (((root->board)[row][col] == 'b') || 
                    ((root->board)[row][col] == 'B')){
                    test_move[0] = 'A' + col;
                    test_move[1] = '1' + row;
                    test_move[2] = '-';
                    test_move[5] = '\0';
                    
                    for (i=0; i<8; i++){
                        
                        test_move[3] = 'A' + col + find_piece_moves[i][1];
                        test_move[4] = '1' + row + find_piece_moves[i][0];
     
                        error_type = check_move(test_move, root->move_num, root->board);

                        if (error_type < 0){
                            root->nboards += 1;
                            new_board = duplicate_board(root->board);
                            play_move(error_type, test_move, new_board);
                            
                            /* allocate pointer to pointer to node for first position found*/
                            if (1){
                            if (root->nboards == 1){
                                root->node = malloc(sizeof(node_t));
                                /*root->node = malloc(5000);*/
                            }
                            }
                            
                            /* allocate pointer to node, number 'nboards' */
                            (root->node)[(root->nboards)-1] = malloc(sizeof(*((root->node)[(root->nboards)-1])));
                            ((root->node)[(root->nboards)-1])-> cmp = min;
                            ((root->node)[(root->nboards)-1])-> depth = (root->depth) + 1;
                            ((root->node)[(root->nboards)-1])-> nboards = 0;
                            ((root->node)[(root->nboards)-1])-> board = new_board;
                            ((root->node)[(root->nboards)-1])-> rational_cost = NULL;
                            ((root->node)[(root->nboards)-1])-> move_num = (root->move_num)+1;
                            ((root->node)[(root->nboards)-1])-> prev_move = (char*)malloc(sizeof(char)*5+1);
                            
                            strcpy(((root->node)[(root->nboards)-1])-> prev_move, test_move);
                            
                            make_branches(((root->node)[(root->nboards)-1]));
                        }
                    }
                }
            }
        
    
            if (root->cmp == min){
                /* cell contain's black's piece */
                if (((root->board)[row][col] == 'w') || 
                    ((root->board)[row][col] == 'W')){
                    /*move_num = 2;*/
                    
                    test_move[0] = 'A' + col;
                    test_move[1] = '1' + row;
                    test_move[2] = '-';
                    test_move[5] = '\0';
                    
                    for (i=0; i<8; i++){
                        test_move[3] = 'A' + col + find_piece_moves[i][1];
                        test_move[4] = '1' + row + find_piece_moves[i][0];
                        error_type = check_move(test_move, root->move_num, root->board);
                        if (error_type < 0){
                            root->nboards += 1;
                            new_board = duplicate_board(root->board);
                            play_move(error_type, test_move, new_board);
                            
                            /* allocate pointer to pointer to node for first position found*/
                            if (root->nboards == 1){
                                root->node = malloc(sizeof(*(root->node)));
                            }
                            
                            /* allocate pointer to node, number 'nboards' */
                            (root->node)[(root->nboards)-1] = malloc(sizeof(*((root->node)[(root->nboards)-1])));
                            ((root->node)[(root->nboards)-1])-> cmp = max;
                            ((root->node)[(root->nboards)-1])-> depth = (root->depth) + 1;
                            ((root->node)[(root->nboards)-1])-> nboards = 0;
                            ((root->node)[(root->nboards)-1])-> board = new_board;
                            ((root->node)[(root->nboards)-1])-> rational_cost = NULL;
                            ((root->node)[(root->nboards)-1])-> move_num = (root->move_num)+1;
                            ((root->node)[(root->nboards)-1])-> prev_move = (char*)malloc(sizeof(char)*5+1);
                            strcpy(((root->node)[(root->nboards)-1])-> prev_move, test_move);
                            
                            make_branches(((root->node)[(root->nboards)-1]));
                        }
                    }
                }
            }
        }
    }
    return;
}


void
recursive_assign_costs(node_t *root){
    int value, i, j, null_count;
    
    
    /* final depth contains cost */
    if (root->depth == 3){
        return; /**(root->rational_cost);*/
    }
    
    /* no moves available, set cost to INT_MAX or INT_MIN */
    else{
    if ((root->nboards) == 0){
        (root->rational_cost) = (int*)malloc(sizeof(int));
        
        if ((root->cmp) == max){
            *(root->rational_cost) = INT_MIN;
            return; /**(root->rational_cost);*/
        }

        if ((root->cmp) == min){
            *(root->rational_cost) = INT_MAX;
            return; /**(root->rational_cost);*/
        }
    }
    }
    
    null_count = 0;
    for (i=0; i<(root->nboards); i++){
        if (((root->node)[i]->rational_cost) == NULL){
            recursive_assign_costs((root->node)[i]);
            null_count += 1;
        }
    }
    
    if (!null_count){
        value = *(((root->node)[0])->rational_cost);
        for (j=1; j<(root->nboards); j++){
        value = (root->cmp)(*((root->node)[j]->rational_cost), value);
        }
        
        root->rational_cost = (int*)malloc(sizeof(int));
        *(root->rational_cost) = value;
    }
    
    return;
    
}
    
int
min(int num1, int num2){
    if (num1 < num2){
        return num1;
    }
    else{
        return num2;
    }
}
    
int
max(int num1, int num2){
    if (num1 > num2){
        return num1;
    }
    else{
        return num2; 
    }
}
    
tree_t
*next_action(tree_t *tree){
    int cost, node_num, move_num;
    char *move;
    char **board;
    int (*cmp)(int, int);
    
    cost = *(tree->root->rational_cost);
    
    if (cost == INT_MIN){
        printf("WHITE WIN!\n");
        return NULL;
    }
    
    if (cost == INT_MAX){
        printf("BLACK WIN!\n");
        return NULL;
    }
    
    for (node_num=0; node_num<(tree->root->nboards); node_num++){
        if (*(((tree->root->node)[node_num])->rational_cost) == cost){
            move = (tree->root->node)[node_num]->prev_move;
            move_num = ((tree->root->node)[node_num]->move_num);
            board = (tree->root->node)[node_num]->board;
            cmp = (tree->root->node)[node_num]->cmp;    
            
            printf("%s\n*** ", SEPARATOR);
            if ((move_num - 1) % 2){
            printf("BLACK ");
            }
            
            else{
            printf("WHITE ");
            }
        
            printf("ACTION #%d: %s\n", move_num - 1, move);
            printf("BOARD COST: %d\n", board_cost(board));
            print_board(board);
            
            tree = make_empty_tree(cmp, board, move_num);
            return tree;
        }
    }
    
    return NULL;
}
                      
                        
                       

